c
wallet_ticket.update_column(:finished, true)
wallet_ticket.quantity <= 0
c!
c
wallet_ticket.update_column(:finished, true)
c
wallet_ticket.update_column(:finished, true)
 wallet_ticket.quantity
c
tickets.map { |i| i.ticket.name }
tickets.sort_by { |wallet_ticket| wallet_ticket.ticket.ticket_class.to_s }
tickets.size
@wallet.wallet_tickets.size
tickets.size
tickets
exit
new_wallet_ticket.errors
new_wallet_ticket.save
ap new_wallet_ticket
c
uri
c!
ticket_moviments.where(moviment_type: :lucro)
ticket_moviments.where(moviment_type: :dividendo)
ap ticket_moviments.size
ticket_moviments.size
ticket_moviments
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
c
self.ticket.name
self.ticket
self
exit
ap wallet_ticket
row
ticket
c
quantity.to_i * average_price.to_d
average_price
quantity
c
current_price = data["stocks"][0]["close"]
ap data["stocks"][0]["close"]current_price = data["stocks"][0]["close"]
ap data["stocks"][0]
ap data["stocks"]
data["stocks"]
data["stocks"]["close"]
current_price = data["stocks"]["close"]
exit
ap data["stocks"]["close"]
ap data["stocks"]
ap data[0]
ap data
data
c
exit
uri = URI("#{API_URL}?search=#{wallet_ticket.ticket.name}&token=#{API_TOKEN}")
exit
ap data
c
ap data
c
ap data["results"][0]["historicalDataPrice"]
ap data["results"][0]
ap data["results"]
data["results"]
current_price = data["results"][0]["historicalDataPrice"][0]["close"]
ap data
data
exit
data["results"][0]["historicalDataPrice"][0]["close"]
ap data
ap data["results"][0][0]
ap data["results"][0].first
ap data["results"][0]
ap data["results"]
ap data
ap data[0]
ap data
data
exit
tickets = WalletTicket.joins(:ticket).select { |i| i.quantity > 0}.map { |i| i.ticket.name }.uniq[0..1]
tickers = tickets.join(',')
tickets = WalletTicket.joins(:ticket).select { |i| i.quantity > 0}.map { |i| i.ticket.name }.uniq.first
tickets = WalletTicket.joins(:ticket).select { |i| i.quantity > 0}.map { |i| i.ticket.name }.uniq
tickets = WalletTicket.joins(:ticket).select { |i| i.quantity > 0}.map { |i| i.ticket.name }.uniq.first.to_a
WalletTicket.joins(:ticket).select { |i| i.quantity > 0}.map { |i| i.ticket.name }.uniq.first
tickets = WalletTicket.joins(:ticket).select { |i| i.quantity > 0}.map { |i| i.ticket.name }.uniq
WalletTicket.joins(:ticket).select { |i| i.quantity > 0}.map { |i| i.ticket.name }.uniq
WalletTicket.joins(:ticket).map { |i| i.ticket.name }.uniq
WalletTicket.joins(:ticket).map { |i| i.ticket.name }
WalletTicket.joins(:ticket).all.size
WalletTicket.joins(:ticket).all
WalletTicket.joins(:ticket).all.select { |i| i.quantity > 0 }.group("tickets.name").size
WalletTicket.joins(:ticket).all.select { |i| i.quantity > 0 }.group("tickets.name")
c
WalletTicket.joins(:ticket).all.first
WalletTicket.all.first.ticket
WalletTicket.all.first
WalletTicket.all
WalletTicket.joins(:ticket).all
WalletTicket.joins(:ticket).all.select { |i| i.quantity > 0 }
ap WalletTicket.joins(:ticket).all.select { |i| i.quantity > 0 }
exit
row[1].cell_value.downcase.strip
moviment_type
exit
c
n
c!
c
price            = row[7].cell_value.gsub(",", ".").to_f
quantity         = row[6].cell_value.gsub(",", ".").to_i
row[6]
row[6].gsub(",", ".").cell_value.to_i
row[5].cell_value
institution
n
c!
c
negotiation_date = Date.parse(row[0].cell_value) rescue nil
ap row
row
c
xlsx.last_row
xlsx.first_row
xlsx.first
xlsx.size
xlsx[0]
xlsx[2]
xlsx.last
xlsx.first
xlsx
